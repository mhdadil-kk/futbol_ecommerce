<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verify OTP</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');

        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f0f2f5;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            color: #333;
        }

        .container {
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 350px;
            text-align: center;
        }

        h2 {
            margin-bottom: 15px;
            font-size: 22px;
            color: #4a4a4a;
        }

        .otp-input-container {
            display: grid;
            grid-template-columns: repeat(6, 1fr);
            gap: 6px;
            margin-bottom: 15px;
        }

        .otp-input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 18px;
            text-align: center;
            background-color: #fafafa;
            transition: border-color 0.3s ease;
        }

        .otp-input:focus {
            border-color: #007bff;
            outline: none;
        }

        .button {
            width: 100%;
            padding: 10px;
            background-color: #007bff;
            border: none;
            border-radius: 4px;
            color: #fff;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .button:hover {
            background-color: #0056b3;
        }

        .button:disabled {
            background-color: #c0c0c0;
            cursor: not-allowed;
        }

        .timer {
            font-size: 16px;
            margin-top: 10px;
            color: #007bff;
            font-weight: 500;
        }

        .resend-container {
            margin-top: 15px;
            font-size: 14px;
            color: #6c757d;
        }

        .resend-container button {
            background: none;
            border: none;
            color: #007bff;
            cursor: pointer;
            padding: 0;
            font-weight: 500;
        }

        .resend-container button:disabled {
            color: #c0c0c0;
            cursor: not-allowed;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <div class="container">
        <h2>Verify OTP</h2>
        <form id="otp-form" action="/verify-otp" method="POST">
            <input type="hidden" id="email" name="email" value="<%= email %>" />
            <div class="otp-input-container">
                <input type="text" maxlength="1" class="otp-input" name="otp1" required />
                <input type="text" maxlength="1" class="otp-input" name="otp2" required />
                <input type="text" maxlength="1" class="otp-input" name="otp3" required />
                <input type="text" maxlength="1" class="otp-input" name="otp4" required />
                <input type="text" maxlength="1" class="otp-input" name="otp5" required />
                <input type="text" maxlength="1" class="otp-input" name="otp6" required />
            </div>
            <button class="button" type="submit">Verify OTP</button>
        </form>
        
        <div class="resend-container">
            <span>Didn't receive the OTP?</span>
            <button id="resendBtn" disabled>Resend OTP</button>
        </div>

        <div class="timer" id="timer">5:00</div>
    </div>

    <script>
        const resendBtn = document.getElementById('resendBtn');
        resendBtn.disabled = true;

        setTimeout(() => {
            resendBtn.disabled = false;
            resendBtn.textContent = 'Resend OTP';
        }, 30000); 

        let time = 300;
        const timerElement = document.getElementById('timer');

        const updateTimer = () => {
            const minutes = Math.floor(time / 60);
            const seconds = time % 60;
            timerElement.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
            if (time > 0) {
                time--;
            } else {
                clearInterval(timerInterval);
                timerElement.textContent = "Time's up!";
                resendBtn.disabled = false;
            }
        };

        const timerInterval = setInterval(updateTimer, 1000);

        document.getElementById('otp-form').addEventListener('submit', async function(event) {
            event.preventDefault();
            const otp = Array.from(document.querySelectorAll('.otp-input'))
                .map(input => input.value)
                .join('');
                console.log(otp)
            const email = document.getElementById('email').value
            console.log(email)
            const formData = {
                otp:otp,
                email:email
            }
            try {
                const response = await fetch(this.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body:  JSON.stringify(formData)
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok.');
                }

                const result = await response.json(); 

                if (result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Verification Successful',
                        text: result.success,
                        confirmButtonText: 'Login Now'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/login';
                        }
                    });
                } else if (result.error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: result.error
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong. Please try again.'
                });
            }
        });

        resendBtn.addEventListener('click', async function(event) {
            event.preventDefault();
            try {
                const response = await fetch('/resend-otp', {
                    method: 'POST',
                    body: new URLSearchParams({ email: '<%= email %>' })
                });
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'OTP Sent',
                        text: 'A new OTP has been sent to your email.'
                    });
                } else {
                    throw new Error('Failed to resend OTP.');
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to resend OTP. Please try again.'
                });
            }
        });

        const otpInputs = document.querySelectorAll('.otp-input');

        otpInputs.forEach((input, index) => {
            input.addEventListener('input', () => {
                if (input.value.length === 1 && index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
            });
            input.addEventListener('keydown', (event) => {
                if (event.key === 'Backspace' && input.value === '' && index > 0) {
                    otpInputs[index - 1].focus();
                }
            });
        });
    </script>
</body>
</html>
